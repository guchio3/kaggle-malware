import pandas as pd


def group_battery(x):
    x = x.lower()
    if 'li' in x:
        return 1
    else:
        return 0


def rename_edition(x):
    x = x.lower()
    if 'core' in x:
        return 'Core'
    elif 'pro' in x:
        return 'pro'
    elif 'enterprise' in x:
        return 'Enterprise'
    elif 'server' in x:
        return 'Server'
    elif 'home' in x:
        return 'Home'
    elif 'education' in x:
        return 'Education'
    elif 'cloud' in x:
        return 'Cloud'
    else:
        return x


def e003_kernel_features(df):
    # prepare
    df['OsBuildLab'] = df['OsBuildLab'].astype('category')
    df['OsBuildLab'] = df['OsBuildLab'].cat.add_categories(['0.0.0.0.0-0'])
    df['OsBuildLab'] = df['OsBuildLab'].fillna('0.0.0.0.0-0')

    # start fe
    res_df = pd.DataFrame()

    res_df['MachineIdentifier'] = df['MachineIdentifier']

    res_df['EngineVersion_2'] = df['EngineVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    res_df['EngineVersion_3'] = df['EngineVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    res_df['AppVersion_1'] = df['AppVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    res_df['AppVersion_2'] = df['AppVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    res_df['AppVersion_3'] = df['AppVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    res_df['AvSigVersion_0'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[0]).astype('category')
    res_df['AvSigVersion_1'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    res_df['AvSigVersion_2'] = df['AvSigVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')

    res_df['OsBuildLab_0'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[0]).astype('category')
    res_df['OsBuildLab_1'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[1]).astype('category')
    res_df['OsBuildLab_2'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[2]).astype('category')
    res_df['OsBuildLab_3'] = df['OsBuildLab'].apply(
        lambda x: x.split('.')[3]).astype('category')

    res_df['Census_OSVersion_0'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[0]).astype('category')
    res_df['Census_OSVersion_1'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[1]).astype('category')
    res_df['Census_OSVersion_2'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[2]).astype('category')
    res_df['Census_OSVersion_3'] = df['Census_OSVersion'].apply(
        lambda x: x.split('.')[3]).astype('category')

    # https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    res_df['primary_drive_c_ratio'] = df['Census_SystemVolumeTotalCapacity'] / \
        df['Census_PrimaryDiskTotalCapacity']
    res_df['non_primary_drive_MB'] = df['Census_PrimaryDiskTotalCapacity'] - \
        df['Census_SystemVolumeTotalCapacity']

    res_df['aspect_ratio'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'] / \
        df['Census_InternalPrimaryDisplayResolutionVertical']

    res_df['monitor_dims'] = df['Census_InternalPrimaryDisplayResolutionHorizontal'].astype(
        str) + '*' + df['Census_InternalPrimaryDisplayResolutionVertical'].astype('str')
    res_df['monitor_dims'] = res_df['monitor_dims'].astype('category')

    res_df['dpi'] = ((df['Census_InternalPrimaryDisplayResolutionHorizontal']**2 +
                      df['Census_InternalPrimaryDisplayResolutionVertical']**2)**.5) / (df['Census_InternalPrimaryDiagonalDisplaySizeInInches'])

    res_df['dpi_square'] = res_df['dpi'] ** 2

    res_df['MegaPixels'] = (df['Census_InternalPrimaryDisplayResolutionHorizontal']
                            * df['Census_InternalPrimaryDisplayResolutionVertical']) / 1e6

    res_df['Screen_Area'] = (res_df['aspect_ratio'] * (
        df['Census_InternalPrimaryDiagonalDisplaySizeInInches']**2)) / (res_df['aspect_ratio']**2 + 1)

    res_df['ram_per_processor'] = df['Census_TotalPhysicalRAM'] / \
        df['Census_ProcessorCoreCount']

    res_df['new_num_0'] = df['Census_InternalPrimaryDiagonalDisplaySizeInInches'] / \
        df['Census_ProcessorCoreCount']

    res_df['new_num_1'] = df['Census_ProcessorCoreCount'] * \
        df['Census_InternalPrimaryDiagonalDisplaySizeInInches']

    df['hghdec_cnt'] = 0
    df.loc[df['CountryIdentifier'].isin([104,
                                         95,
                                         214,
                                         89,
                                         94,
                                         59,
                                         21,
                                         100,
                                         85,
                                         195,
                                         159,
                                         57,
                                         155,
                                         188,
                                         33,
                                         44,
                                         18,
                                         88,
                                         81,
                                         205,
                                         141]) == True,
           'hghdec_cnt'] = 1
    res_df['hghdec_cnt'] = df['hghdec_cnt']

    # group battery
    res_df['Census_InternalBatteryType'] = df['Census_InternalBatteryType'].apply(
        group_battery)

    # group editions
    res_df['Census_OSEdition'] = df['Census_OSEdition'].astype(str)
    res_df['Census_OSEdition'] = res_df['Census_OSEdition'].apply(rename_edition)
    res_df['Census_OSEdition'] = res_df['Census_OSEdition'].astype('category')

    res_df['Census_OSSkuName'] = df['Census_OSSkuName'].astype(str)
    res_df['Census_OSSkuName'] = res_df['Census_OSSkuName'].apply(rename_edition)
    res_df['Census_OSSkuName'] = res_df['Census_OSSkuName'].astype('category')

    res_df.columns = ['e003_' + col if col !=
                      'MachineIdentifier' else col for col in res_df.columns]
    return res_df
