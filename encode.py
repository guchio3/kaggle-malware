import os

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from tqdm import tqdm

from tools.utils.encoding import (count_clip_encoding, frequency_encoding,
                                  label_encoding)
from tools.utils.feature_tools import load_features, save_features
from tools.utils.general_utils import load_configs


def encode_features(features, enc_type, base_dir='./inputs/features/',
                    logger=None):
    base_features_df = load_features(features, base_dir, os.cpu_count())
    if enc_type == 'le':
        # should i return encoder here?
        enc_features_df, le_dict = label_encoding(base_features_df,
                                                  fit_columns=features)
        enc_features_df.columns = [
            col[:4] + '_le' + col[4:] for col in enc_features_df.columns]
    elif enc_type == 'cce':
        # should i return encoder here?
        base_features_df.set_index('MachineIdentifier', inplace=True)
        enc_features_df = count_clip_encoding(base_features_df)
        enc_features_df.columns = [
            col[:4] + '_cce' + col[4:] for col in enc_features_df.columns]
            # 'cce_' + col for col in enc_features_df.columns]
    elif enc_type == 'fe':
        # should i return encoder here?
        base_features_df.set_index('MachineIdentifier', inplace=True)
        enc_features_df = frequency_encoding(base_features_df)
        enc_features_df.columns = [
            col[:4] + '_fe' + col[4:] for col in enc_features_df.columns]
            # 'fe_' + col for col in enc_features_df.columns]
    else:
        raise Exception('invalid enc_type')
    save_features(enc_features_df, base_dir, os.cpu_count() - 1, logger)
    return enc_features_df


if __name__ == '__main__':
    le_config = load_configs('enc_config.yml')
    features = le_config['e023_fe']
    enc_features_df = encode_features(features, 'fe')
    print(enc_features_df.head())
