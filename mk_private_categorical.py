import os
import pickle

import numpy as np
import pandas as pd
from tqdm import tqdm

from tools.utils.feature_tools import load_features, save_features
from tools.utils.general_utils import load_configs


def choose_private_categoricals(trn_df, tst_df, private_cut, cat_features):
    #    trn_df = trn_df.copy()
    #    tst_df = tst_df.copy()

    pri_df = tst_df[private_cut]
    print('now choosing categorical features ...')
    for col in tqdm(cat_features):
        pri_col_cnt = pri_df[col].value_counts()
        trn_col_cnt = trn_df[col].value_counts()
        val_labels = set(pri_col_cnt[pri_col_cnt > 1000].index.astype(int)) & set(
            trn_col_cnt[trn_col_cnt > 1000].index.astype(int))
        max_label = np.max(list(val_labels)) + 1
        trn_df[col] = np.where(
            trn_df[col].isin(val_labels),
            trn_df[col],
            max_label)
#            0)
#            np.nan)
        tst_df[col] = np.where(
            tst_df[col].isin(val_labels),
            tst_df[col],
            max_label)
#            0)
#            np.nan)
    return trn_df, tst_df


with open('./inputs/nes_info/private_cut_updated.pkl', 'rb') as fin:
    pri_cutter = pickle.load(fin)
pri_cutter

cat_features = [
#    'cce_le_AppVersion',
#    'cce_le_AutoSampleOptIn',
#    'cce_le_AVProductsEnabled',
#    'cce_le_AVProductStatesIdentifier',
#    'cce_le_Census_ActivationChannel',
#    'cce_le_Census_ChassisTypeName',
#    'cce_le_Census_DeviceFamily',
#    'cce_le_Census_FirmwareManufacturerIdentifier',
#    'cce_le_Census_FlightRing',
#    'cce_le_Census_GenuineStateName',
#    'cce_le_Census_HasOpticalDiskDrive',
#    'cce_le_Census_InternalBatteryType',
#    'cce_le_Census_IsAlwaysOnAlwaysConnectedCapable',
#    'cce_le_Census_IsFlightingInternal',
#    'cce_le_Census_IsFlightsDisabled',
#    'cce_le_Census_IsPenCapable',
#    'cce_le_Census_IsPortableOperatingSystem',
#    'cce_le_Census_IsSecureBootEnabled',
#    'cce_le_Census_IsTouchEnabled',
#    'cce_le_Census_IsVirtualDevice',
#    'cce_le_Census_IsWIMBootEnabled',
#    'cce_le_Census_MDC2FormFactor',
#    'cce_le_Census_OSArchitecture',
#    'cce_le_Census_OSBranch',
#    'cce_le_Census_OSBuildRevision',
#    'cce_le_Census_OSEdition',
#    'cce_le_Census_OSInstallLanguageIdentifier',
#    'cce_le_Census_OSInstallTypeName',
#    'cce_le_Census_OSSkuName',
#    'cce_le_Census_OSUILocaleIdentifier',
#    'cce_le_Census_OSVersion',
#    'cce_le_Census_OSWUAutoUpdateOptionsName',
#    'cce_le_Census_PowerPlatformRoleName',
#    'cce_le_Census_PrimaryDiskTypeName',
#    'cce_le_Census_ProcessorClass',
#    'cce_le_Census_ProcessorManufacturerIdentifier',
#    'cce_le_Census_ThresholdOptIn',
#    'cce_le_CountryIdentifier',
#    'cce_le_Firewall',
#    'cce_le_GeoNameIdentifier',
#    'cce_le_HasTpm',
#    'cce_le_IeVerIdentifier',
#    'cce_le_IsBeta',
#    'cce_le_IsProtected',
#    'cce_le_IsSxsPassiveMode',
#    'cce_le_LocaleEnglishNameIdentifier',
#    'cce_le_MachineIdentifier',
#    'cce_le_OrganizationIdentifier',
#    'cce_le_OsBuild',
#    'cce_le_OsBuildLab',
#    'cce_le_OsPlatformSubRelease',
#    'cce_le_OsSuite',
#    'cce_le_OsVer',
#    'cce_le_Platform',
#    'cce_le_Processor',
#    'cce_le_ProductName',
#    'cce_le_PuaMode',
#    'cce_le_RtpStateBitfield',
#    'cce_le_SkuEdition',
#    'cce_le_SmartScreen',
#    'cce_le_SMode',
#    'cce_le_UacLuaenable',
#    'cce_le_Wdft_IsGamer',
#    'cce_le_Wdft_RegionIdentifier',
#    'e003_cce_le_AppVersion_1',
#    'e003_cce_le_AppVersion_2',
#    'e003_cce_le_AppVersion_3',
#    'e003_cce_le_Census_InternalBatteryType',
#    'e003_cce_le_Census_OSEdition',
#    'e003_cce_le_Census_OSSkuName',
#    'e003_cce_le_Census_OSVersion_0',
#    'e003_cce_le_Census_OSVersion_1',
#    'e003_cce_le_Census_OSVersion_2',
#    'e003_cce_le_Census_OSVersion_3',
#    'e003_cce_le_OsBuildLab_0',
#    'e003_cce_le_OsBuildLab_1',
#    'e003_cce_le_OsBuildLab_2',
#    'e003_cce_le_OsBuildLab_3',
#    'e003_fe_le_monitor_dims',
#    'fe_le_Census_OEMModelIdentifier',
#    'fe_le_CityIdentifier',
#    'fe_le_Census_FirmwareVersionIdentifier',
#    'fe_le_Census_ProcessorModelIdentifier',
#    'fe_le_Census_OEMNameIdentifier',
#    'fe_le_DefaultBrowsersIdentifier',
#    'e007_DateAS_day',
#    'e007_DateAS_dayofweek',
#    'e007_DateAS_hour',
#    'e007_DateBL_day',
#    'e007_DateBL_dayofweek',
#    'e007_DateBL_hour',
#    'e007_DateOS_day',
#    'e007_DateOS_dayofweek',
#    'e007_DateOS_hour',
    'e021_AppVersion_70per_nuniq_AvSigVersion',
    'e021_Census_OSBranch_70per_nuniq_AvSigVersion',
    'e021_Census_OSBuildRevision_70per_nuniq_AvSigVersion',
    'e021_Census_OSVersion_70per_nuniq_AvSigVersion',
    'e021_EngineVersion_70per_nuniq_AvSigVersion',
    'e021_OsBuildLab_70per_nuniq_AvSigVersion',
]

df = load_features(cat_features + ['MachineIdentifier'], './inputs/features/', os.cpu_count())
df.set_index('MachineIdentifier', inplace=True)

trn_idx = pd.read_pickle('./inputs/nes_info/trn_MachineIdentifier.pkl.gz')
tst_idx = pd.read_pickle('./inputs/nes_info/tst_MachineIdentifier.pkl.gz')

trn_df = df.loc[trn_idx]
tst_df = df.loc[tst_idx]

trn_df, tst_df = choose_private_categoricals(
    trn_df, tst_df, pri_cutter, cat_features)

df = pd.concat([trn_df, tst_df], axis=0)
df.columns = ['private_' + col for col in df.columns]
save_features(df, './inputs/features/', os.cpu_count())
