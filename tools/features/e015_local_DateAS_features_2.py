import gc

import numpy as np
import pandas as pd

from ..utils.general_utils import load_configs


def e015_local_DateAS_features_2(df):
    if 'MachineIdentifier' not in df.columns or 'DateAS' not in df.columns:
        raise Exception(
            'you have to include MachineIdentifier and DateAS at least.')

    res_df = pd.DataFrame()
    res_df['MachineIdentifier'] = df['MachineIdentifier']
    df['DateAS_date_round'] = df['DateAS'].dt.round('d')
    res_df['DateAS_date_round'] = df['DateAS_date_round']

    # add pivot base to df
    DateAS_date_round_min = df['DateAS_date_round'].min()
    DateAS_date_round_max = df['DateAS_date_round'].max()
    filling_df = pd.DataFrame()
    filling_df['DateAS_date_round'] = pd.date_range(
        start=DateAS_date_round_min,
        end=DateAS_date_round_max,
        freq='d')
    df = pd.concat([df, filling_df], axis=0)

    # count at first
    piv_df = df.pivot_table(
        values=['IsProtected'],
        index='DateAS_date_round',
        aggfunc='mean').rename(columns={'IsProtected': 'IsProtected_local_mean'})
    res_df = res_df.merge(piv_df, on='DateAS_date_round', how='left')
    res_df['weekly_IsProtected_local_mean_mean'] = res_df['IsProtected_local_mean'].rolling(
        window=7, min_periods=1).mean()
    res_df['monthly_IsProtected_local_mean_mean'] = res_df['IsProtected_local_mean'].rolling(
        window=30, min_periods=1).mean()
    res_df['weekly_IsProtected_local_mean_var'] = res_df['IsProtected_local_mean'].rolling(
        window=7, min_periods=1).var()
    res_df['monthly_IsProtected_local_mean_var'] = res_df['IsProtected_local_mean'].rolling(
        window=30, min_periods=1).var()
    res_df['weekly_IsProtected_local_mean_cov'] = res_df['weekly_IsProtected_local_mean_var'] / \
        res_df['weekly_IsProtected_local_mean_mean']
    res_df['monthly_IsProtected_local_mean_cov'] = res_df['monthly_IsProtected_local_mean_var'] / \
        res_df['weekly_IsProtected_local_mean_mean']

    # drop non useful cols
    # add exp id to the col
    res_df = res_df.drop('DateAS_date_round', axis=1)
    res_df.columns = ['e015_' + col if col !=
                      'MachineIdentifier' else col for col in res_df.columns]
    return res_df
