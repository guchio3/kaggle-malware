import gc

import numpy as np
import pandas as pd
from tqdm import tqdm

from ..utils.general_utils import load_configs


def e022_DateAS_rolling(df):
    if 'MachineIdentifier' not in df.columns or 'DateAS' not in df.columns:
        raise Exception(
            'you have to include MachineIdentifier and DateAS at least.')

    res_df = pd.DataFrame()
    res_df['MachineIdentifier'] = df['MachineIdentifier']
    df['DateAS_date_round'] = df['DateAS'].dt.round('min')
    res_df['DateAS_date_round'] = df['DateAS_date_round']

    # add pivot base to df
    DateAS_date_round_min = df['DateAS_date_round'].min()
    DateAS_date_round_max = df['DateAS_date_round'].max()
    filling_df = pd.DataFrame()
    filling_df['DateAS_date_round'] = pd.date_range(
        start=DateAS_date_round_min,
        end=DateAS_date_round_max,
        freq='d')
    filling_df['hook'] = 0
    df['hook'] = 1
    df = pd.concat([df, filling_df], axis=0)

    # count at first
    piv_df = df.pivot_table(
        values='hook',
        index='DateAS_date_round',
        aggfunc='sum')
    piv_df.loc[piv_df.hook != 0, 'hook'] = 1
    # res_df = res_df.merge(piv_df, on='DateAS_date_round', how='left')

    # get mean and var and cov
    piv_df['DateAS_hook_hour'] = piv_df['hook'].rolling(
        window=60, min_periods=1).sum()
    piv_df['DateAS_hook_3hours'] = piv_df['hook'].rolling(
        window=60 * 3, min_periods=1).sum()
    piv_df['DateAS_hook_12hours'] = piv_df['hook'].rolling(
        window=60 * 12, min_periods=1).sum()
    piv_df['DateAS_hook_day'] = piv_df['hook'].rolling(
        window=60 * 24, min_periods=1).sum()
    piv_df['DateAS_hook_week'] = piv_df['hook'].rolling(
        window=60 * 24 * 7, min_periods=1).sum()
    piv_df['DateAS_hook_hour_future'] = piv_df['hook'][::-1].rolling(
        window=60, min_periods=1).sum()[::-1]
    piv_df['DateAS_hook_3hours_future'] = piv_df['hook'][::-1].rolling(
        window=60 * 3, min_periods=1).sum()[::-1]
    res_df = res_df.merge(piv_df[['DateAS_hook_hour',
                                  'DateAS_hook_3hours',
                                  'DateAS_hook_12hours',
                                  'DateAS_hook_day',
                                  'DateAS_hook_week',
                                  'DateAS_hook_hour_future',
                                  'DateAS_hook_3hours_future',
                                  ]],
                          on='DateAS_date_round',
                          how='left')

    # drop non useful cols
    # add exp id to the col
    res_df = res_df.drop(['DateAS_date_round'], axis=1)
    res_df.columns = ['e022_' + col if col !=
                      'MachineIdentifier' else col for col in res_df.columns]
    return res_df
