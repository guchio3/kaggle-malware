import gc

import numpy as np
import pandas as pd
from tqdm import tqdm

from ..utils.general_utils import load_configs


def e020_local_DateAS_features_3(df):
    '''
    Rolling mean and var of the binary features
    The minimum unit of the time is hour

    '''
    if 'MachineIdentifier' not in df.columns or 'DateAS' not in df.columns:
        raise Exception(
            'you have to include MachineIdentifier and DateAS at least.')

    res_df = pd.DataFrame()
    res_df['MachineIdentifier'] = df['MachineIdentifier']
    df['DateAS_date_round'] = df['DateAS'].dt.round('min')
    res_df['DateAS_date_round'] = df['DateAS_date_round']

    # add pivot base to df
    DateAS_date_round_min = df['DateAS_date_round'].min()
    DateAS_date_round_max = df['DateAS_date_round'].max()
    filling_df = pd.DataFrame()
    filling_df['DateAS_date_round'] = pd.date_range(
        start=DateAS_date_round_min,
        end=DateAS_date_round_max,
        freq='d')
    df = pd.concat([df, filling_df], axis=0)

    # count at first
    targets = [
        col for col in df.columns if col not in [
            'MachineIdentifier',
            'DateAS',
            'DateAS_date_round']]
    rename_dict = {col: col + '_local_mean' for col in targets}
    piv_df = df.pivot_table(
        values=targets,
        index='DateAS_date_round',
        aggfunc='mean').rename(columns=rename_dict)
#    res_df = res_df.merge(piv_df, on='DateAS_date_round', how='left')

    # get mean and var and cov
    feature_cols = [
        col for col in piv_df.columns.tolist() if not col in [
            'MachineIdentifier',
            'DateAS_date_round']]
    for col in tqdm(feature_cols):
        piv_df[f'hourly_{col}_mean'] = piv_df[col].rolling(
            window=60, min_periods=1).mean()
        piv_df[f'daily_{col}_mean'] = piv_df[col].rolling(
            window=24 * 60, min_periods=1).mean()
        piv_df[f'hourly_{col}_mean_future'] = piv_df[col][::-1].rolling(
            window=60, min_periods=1).mean()[::-1]
        piv_df[f'daily_{col}_mean_future'] = piv_df[col][::-1].rolling(
            window=24 * 60, min_periods=1).mean()[::-1]
        piv_df[f'hourly_{col}_var'] = piv_df[col].rolling(
            window=60, min_periods=1).var()
        piv_df[f'daily_{col}_var'] = piv_df[col].rolling(
            window=24 * 60, min_periods=1).var()
        piv_df[f'hourly_{col}_var_future'] = piv_df[col][::-1].rolling(
            window=60, min_periods=1).var()[::-1]
        piv_df[f'daily_{col}_var_future'] = piv_df[col][::-1].rolling(
            window=24 * 60, min_periods=1).var()[::-1]

    res_df = res_df.merge(piv_df, on='DateAS_date_round', how='left')
    # drop non useful cols
    # add exp id to the col
    res_df = res_df.drop('DateAS_date_round', axis=1)
    res_df.columns = ['e020_' + col if col !=
                      'MachineIdentifier' else col for col in res_df.columns]
    return res_df
