import numpy as np
import pandas as pd

import joblib

from ..utils.general_utils import dec_timer, sel_log

from .e000_basic_features import e000_basic_features
from .e003_kernel_features import e003_kernel_features


def _base_features(df, exp_ids):
    _features = []
    if 'e000' in exp_ids:
        _features.append(e000_basic_features(df))
    if 'e003' in exp_ids:
        _features.append(e003_kernel_features(df))
    features = pd.concat(_features, axis=1)
    return features


@dec_timer
def _load_base_features(
        exp_ids, trn_tst_df, trn_df, tst_df, logger):
    target_ids = [
        'e000',
        'e003',
    ]
    if len(set(target_ids) & set(exp_ids)) < 1:
        sel_log(f'''
                ======== {__name__} ========
                Stop feature making because even 1 element in exp_ids
                    {exp_ids}
                does not in target_ids
                    {target_ids}''', logger)
        return None, None, None

    trn_path = './inputs/prep/train.jbl.gz'
    tst_path = './inputs/prep/test.jbl.gz'

    # Load dfs if not input.
    if trn_df is None:
        sel_log(f'loading {trn_path} ...', None)
        trn_df = joblib.load(trn_path)
    if tst_df is None:
        sel_log(f'loading {tst_path} ...', None)
        tst_df = joblib.load(tst_path)
    if trn_tst_df is None:
        sel_log(f'creating trn_tst_df ...', None)
        trn_tst_df = pd.concat([trn_df, tst_df], axis=0)

    return trn_tst_df, trn_df, tst_df
