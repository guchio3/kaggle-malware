import gc
import sys
import time
from logging import getLogger

from tools.features.base_feature_utils import (_base_features,
                                               _load_base_features)
from tools.features.meta_feature_utils import (_load_meta_features,
                                               _meta_features)
from tools.features.ts_feature_utils import _load_ts_features, _ts_features
from tools.utils.feature_tools import _mk_features, _mk_ts_features
from tools.utils.general_utils import (dec_timer, logInit, parse_args,
                                       send_line_notification)


@dec_timer
def mk_features(args, logger):
    trn_df = None
    tst_df = None
    trn_tst_df = None
    # base features
    trn_tst_df, trn_meta_df, tst_meta_df = _mk_features(
        _load_base_features, _base_features,
        args.nthread, args.exp_ids, trn_tst_df,
        trn_df, tst_df, logger=logger)
    trn_tst_df, trn_meta_df, tst_meta_df = _mk_features(
        _load_meta_features, _meta_features,
        args.nthread, args.exp_ids, None,
        None, None, logger=logger)
    trn_tst_df, trn_meta_df, tst_meta_df = _mk_ts_features(
        _load_ts_features, _ts_features,
        args.nthread, args.exp_ids, None,
        None, None, logger=logger)
    gc.collect()


if __name__ == '__main__':
    t0 = time.time()
    logger = getLogger(__name__)
    logger = logInit(logger, './logs/', 'mk_features.log')
    args = parse_args(logger)

    logger.info('')
    logger.info('')
    logger.info(
        f'============ EXP {args.exp_ids[0]}, START MAKING FEATURES =============')
    mk_features(args, logger)
    prec_time = time.time() - t0
    send_line_notification(
        f'Finished: {" ".join(sys.argv)} in {prec_time:.1f} s !')
