import gc

import numpy as np
import pandas as pd
from tqdm import tqdm

from ..utils.general_utils import load_configs


def e028_AvSigVersion_country_aggregate(df):
    if 'MachineIdentifier' not in df.columns or 'AvSigVersion' not in df.columns:
        raise Exception(
            'you have to include MachineIdentifier and AvSigVersion at least.')

    res_df = pd.DataFrame()
    res_df['MachineIdentifier'] = df['MachineIdentifier']
    res_df['AvSigVersion'] = df['AvSigVersion']

    # remove few samples
    ver_cnts = df.groupby('AvSigVersion').MachineIdentifier.count()
    valid_versions = ver_cnts[ver_cnts > 1000].index

    # count at first
    ctry_grp_df = df.groupby(['AvSigVersion', 'CountryIdentifier']).MachineIdentifier.count(
    ).reset_index().groupby('AvSigVersion').CountryIdentifier.count()
    ctry_grp_df = ctry_grp_df.loc[valid_versions].reset_index()
    city_grp_df = df.groupby(['AvSigVersion', 'CityIdentifier']).MachineIdentifier.count(
    ).reset_index().groupby('AvSigVersion').CityIdentifier.count()
    city_grp_df = city_grp_df.loc[valid_versions].reset_index()

    res_df = res_df.merge(ctry_grp_df, on='AvSigVersion', how='left')
    res_df = res_df.merge(city_grp_df, on='AvSigVersion', how='left')
    res_df = res_df.rename(columns={'CountryIdentifier': 'CountryIdentifier_avcnt', 'CityIdentifier': 'CityIdentifier_avcnt'})

    # drop non useful cols
    # add exp id to the col
    res_df = res_df.drop('AvSigVersion', axis=1)
    res_df.columns = ['e028_' + col if col !=
                      'MachineIdentifier' else col for col in res_df.columns]
    return res_df
